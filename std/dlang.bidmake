enum TargetType
{
    exe;
    staticLibrary;
    dynamicLibrary;
    objectFile;
}
enum CompileMode
{
    debug;
    release;
}

interface compile
{
    inline filename targetName;

    required TargetType targetType;
    dirpath outputDirectory;
    dirpath objectDirectory;
    // TODO: I'd rather have this be an "option"
    //       so you could do:
    //           includeImports;
    //       rather than:
    //           includeImports true;
    bool includeImports;

    list filepath source;
    list dirpath includePath;
    list filepath library;

    // TODO: allow dependencies to be specified somehow
    //list compile dependency;
    //list string dependency;

    // options are different, they should be
    // configured by each build, but aren't necessarilly apart
    // or the build contract itself
    //options
    //{
    //    CompileMode mode;
    //    bool debugSymbols;
    //}
}

forwardInterface exe compile
{
    targetType exe;
}

contractor dmd
{
    builtin;
    implement compile;
    // todo: make a way to specify the default action
    // probably "default action ..." or "action default ..."


    // a normal build (as opposed to a "devbuild") is a "one-time build".
    // it builds everything from source whether or not things have already been built.
    // This type of build doesn't need to keep track of dependencies.  Since some tools are run
    // differently when they track dependencies, this can result in calling programs
    // in different ways from a rebuild.
    action build;

    // a "devbuild" will only build what needs to be built.  It also makes sure to generate
    // dependency tracking information to facilitate modular rebuilds.
    action devbuild;
    action clean;

    //onAction compile
    //{
        //Execute dmd
        //{
        //    CommandLine
        //    {
        //        Prefix "-of";
        //        AddArgument $(Contract.Name);
        //    }
        //    CommandLine
        //    {
        //        // TODO: Make this work without having the ending {}
        //        EqualCondition $(Contract.OutputType) StaticLibrary { }
        //        AddArgument "-lib";
        //    }
        //    CommandLine
        //    {
        //        ExpandList Contract.DLanguageOptions.Version;
        //        Prefix "-version=";
        //    }
        //    CommandLine
        //    {
        //        ExpandList Contract.DLanguageOptions.StringImportPath;
        //        // PreArgument -J
        //        Prefix "-J";
        //    }
        //    CommandLine
        //    {
        //        ExpandList Contract.Source.File;
        //        //Condition "Contract.Source.Language == D";
        //    }
        //    CommandLine
        //    {
        //        ExpandList Contract.Library;
        //        //Condition "Contract.Source.Language == D";
        //    }
        //}
    //}
}
